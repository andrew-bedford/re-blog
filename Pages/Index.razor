@page "/"
@page "/{id}"
@using Toolbelt.Blazor.HotKeys2
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JavaScript

<PageTitle>@GetPageTitle()</PageTitle>
<HeadContent>
    <meta name="description" content="@GetPageDescription()" />
    <meta name="keywords" content="@GetPageKeywords()" />
    <meta property="og:title" content="@GetTitle()" />
</HeadContent>

<MudAppBar Elevation="0">
    <a href="https://andrew-bedford.ca">
        <MudAvatar>
            <MudImage Src="images/avatar.jpeg" />
        </MudAvatar>
    </a>

    <MudSpacer />

    <MudIconButton Disabled="@IsPreviousButtonDisabled()" Icon="@Icons.Material.Filled.ArrowBack" OnClick="PreviousButton" Title="Previous" />
    <MudIconButton Icon="@Icons.Material.Filled.Timeline" OnClick="OpenTimelineDialog" Title="Timeline" />
    <MudIconButton Disabled="@IsNextButtonDisabled()" Icon="@Icons.Material.Filled.ArrowForward" OnClick="NextButton" Title="Next" />

    <MudSpacer />
    <MudIconButton Icon="@Icons.Material.Filled.Toc" OnClick="ToggleRightDrawer" Title="Contents" />
</MudAppBar>
<MudDrawer @bind-Open="Application.IsRightDrawerOpen" Anchor="Anchor.Right" ClipMode="DrawerClipMode.Docked" DisableOverlay="true"
    Elevation="1" Variant="DrawerVariant.Temporary">
    <MudDrawerHeader>
        <h3>Contents</h3>
    </MudDrawerHeader>

    @if (Application.ActivePost != null)
    {
        @((MarkupString)Application.ActivePost.TableOfContents)
    }

</MudDrawer>

@if (Application.ActivePost != null)
{
    <post>
        @if (Application.ActivePost.Created != null) {
            <date>@Application.ActivePost.Created?.ToString("MMM d, yyyy")</date>
        }
        @((MarkupString)Application.ActivePost.Html)
        <MudStack Justify="Justify.FlexEnd" Row="true">
            @foreach (string tag in Application.ActivePost.Tags)
                {
                    <MudChip Size="Size.Small">@tag</MudChip>
                }
        </MudStack>
    </post>
}

<MudScrollToTop style="z-index:2000;">
    <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Variant="Variant.Filled" Color="Color.Primary"
        Size="Size.Medium" />
</MudScrollToTop>

@code {
    [Parameter] public string? id { get; set; }

    [Inject] IDialogService DialogService { get; set; } = default!;
    [Inject] HotKeys HotKeys { get; set; } = default!;

    private HotKeysContext? HotKeysContext;
    private string[]? index;

    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        try {
            await JavaScript.InvokeVoidAsync("reAnalytics");
        }
        catch(Exception) {}
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.HotKeysContext = this.HotKeys.CreateContext()
        .Add(ModCode.None, Code.ArrowLeft, async () => await PreviousButton(), exclude: Exclude.InputNonText)
        .Add(ModCode.None, Code.ArrowRight, async () => await NextButton(), exclude: Exclude.InputNonText);
    }

    private void ToggleRightDrawer()
    {
        Application.IsRightDrawerOpen = !Application.IsRightDrawerOpen;
    }

    private async Task PreviousButton()
    {
        if (Application.ActivePost == null)
            return;

        int currentIndex = Application.PublishedPosts.IndexOf(Application.ActivePost);
        if (currentIndex > 0)
        {
            Application.ActivePost = Application.PublishedPosts.ElementAt(currentIndex - 1);
            Navigation.NavigateTo(Application.ActivePost.Id);
            await JavaScript.InvokeVoidAsync("scrollToTop");
        }
    }

    private async Task NextButton()
    {
        if (Application.ActivePost == null)
            return;

        int currentIndex = Application.PublishedPosts.IndexOf(Application.ActivePost);
        if (currentIndex < Application.PublishedPosts.Count - 1)
        {
            Application.ActivePost = Application.PublishedPosts.ElementAt(currentIndex + 1);
            Navigation.NavigateTo(Application.ActivePost.Id);
            await JavaScript.InvokeVoidAsync("scrollToTop");
        }
    }

    private void OpenSearchDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                FullWidth = true,
                MaxWidth =
            MaxWidth.Small,
                Position = DialogPosition.Center
            };
        DialogParameters parameters = new();
        parameters.Add("OnChanged", (Action)StateHasChanged);

        DialogService.Show<Re.Blog.Components.SearchDialog>("", parameters, closeOnEscapeKey);
    }

    private void OpenTimelineDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions()
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Large
            };
        DialogParameters parameters = new();
        parameters.Add("OnChanged", (Action)StateHasChanged);

        DialogService.Show<Re.Blog.Components.TimelineDialog>("", parameters, closeOnEscapeKey);
    }

    private async Task LoadPostsFromIndex()
    {
        index = await Http.GetFromJsonAsync<string[]?>($"posts/index.json?{DateTime.Now.Ticks}");
        if (index == null)
        {
            Console.Error.WriteLine("Could not fetch index (posts/index.json).");
            return;
        }

        foreach (string path in index)
        {
            string markdown = await Http.GetStringAsync(new Uri($"posts/{path}?{DateTime.Now.Ticks}", UriKind.Relative));

            Post post = new Post(path, markdown);
            Application.Posts.Add(post);

            if (post.IsDraft == false) {
                Application.PublishedPosts.Add(post);
            }
        }

        if (id != null && Application.Posts.Count > 0)
        {
            // If the user has a direct link to the post, we load it, even if it is a draft.
            // This allows users to preview their posts as it would appear on the blog before
            // making them public.
            Application.ActivePost = Application.Posts.Where(p => p.Id == id).Single();
        }

        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JavaScript.InvokeVoidAsync("initActiveTableOfContentsLink");
        await JavaScript.InvokeVoidAsync("activateSyntaxHighlighting");
        await JavaScript.InvokeVoidAsync("activateFotorama");
        await JavaScript.InvokeVoidAsync("renderMermaidDiagrams");


        if (firstRender)
        {
            Navigation.LocationChanged += LocationChanged;
            await LoadPostsFromIndex();
        }
        else if (id == null && Application.PublishedPosts.Count > 0)
        {
            // Redirect the user to the latest post by default.
            Application.ActivePost = Application.PublishedPosts.Last();
            Navigation.NavigateTo(Application.ActivePost.Id);
        }
        else if (id != null && Application.Posts.Count > 0 && Application.ActivePost != null && Application.ActivePost.Id != id)
        {
            Application.ActivePost = Application.Posts.Where(p => p.Id == id).Single();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        HotKeysContext?.Dispose();
        Navigation.LocationChanged -= LocationChanged;
    }

    private string GetTitle()
    {
        if (Application.ActivePost != null) {
            return $"{Application.ActivePost.Title}";
        }

        return "";
    }

    private string GetPageTitle()
    {
        if (Application.ActivePost != null) {
            return $"Andrew Bedford: {Application.ActivePost.Title}";
        }

        return "Andrew Bedford";
    }

    private string GetPageDescription()
    {
        if (Application.ActivePost != null) {
            return Application.ActivePost.Abstract;
        }

        return "";
    }

    private string GetPageKeywords()
    {
        if (Application.ActivePost != null) {
            return String.Join(",", Application.ActivePost.Tags);
        }

        return "";
    }

    private bool IsPreviousButtonDisabled()
    {
        return Application.ActivePost != null ? Application.PublishedPosts.IndexOf(Application.ActivePost) == 0 : true;
    }

    private bool IsNextButtonDisabled()
    {
        return Application.ActivePost != null ? Application.PublishedPosts.IndexOf(Application.ActivePost) == Application.PublishedPosts.Count - 1 : true;
    }
}