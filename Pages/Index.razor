@page "/"
@page "/{id}"
@using Toolbelt.Blazor.HotKeys2
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>re/blog</PageTitle>

<MudAppBar Elevation="0">
    <MudAvatar>
        ab
        @* <MudImage Src="images/avatar.png" /> *@
        <!-- TODO: Allow user to configure their avatar from a global configuration file -->
    </MudAvatar>

    <MudSpacer />

    <MudIconButton Disabled="post != null ? Application.Posts.IndexOf(post) == 0 : true" Icon="@Icons.Material.Filled.ArrowBack" OnClick="PreviousButton" Title="Previous" />
    <MudIconButton Icon="@Icons.Material.Filled.Timeline" OnClick="OpenTimelineDialog" Title="Timeline" />
    <MudIconButton Disabled="post != null ? Application.Posts.IndexOf(post) == Application.Posts.Count - 1 : true" Icon="@Icons.Material.Filled.ArrowForward" OnClick="NextButton" Title="Next" />

    <MudSpacer />
    @* <MudIconButton Icon="@Icons.Material.Filled.Search" OnClick="OpenSearchDialog" Title="Search" /> *@
    @* <MudIconButton Icon="@Icons.Material.Filled.Timeline" OnClick="OpenTimelineDialog" Title="Timeline" /> *@
    @* <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Title="GitHub" /> *@
    @* <MudDivider style="background-color:#606060; height:35px; margin:0 23px 0 10px;" Vertical="true" /> *@
    @* <MudIconButton Icon="@Icons.Material.Filled.Info" Title="Info" /> <!-- Author, Published, Last modified? --> *@
    @* <MudIconButton Icon="@Icons.Material.Filled.Label" Title="Tags" /> *@
    <MudIconButton Icon="@Icons.Material.Filled.Toc" OnClick="ToggleRightDrawer" Title="Contents" />
</MudAppBar>
<MudDrawer @bind-Open="Application.IsRightDrawerOpen" ClipMode="DrawerClipMode.Docked"
    Variant="DrawerVariant.Responsive" Anchor="Anchor.Right">
    <MudDrawerHeader>
        Contents
    </MudDrawerHeader>

    @if (post != null)
    {
        @((MarkupString)post.TableOfContents)
    }

</MudDrawer>

@if (post != null)
{
    <post>
        @if (post.Created != null) {
            <date>@post.Created?.ToString("MMM d, yyyy")</date>
        }
        @((MarkupString)post.Html)
        <MudStack Justify="Justify.FlexEnd" Row="true">
            @foreach (string tag in post.Tags)
                {
                    <MudChip Size="Size.Small">@tag</MudChip>
                }
        </MudStack>
    </post>
}

<MudScrollToTop style="z-index:1100;">
    <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Variant="Variant.Filled" Color="Color.Primary"
        Size="Size.Medium" />
</MudScrollToTop>

@code {
    [Parameter] public string? id { get; set; }

    [Inject] IDialogService DialogService { get; set; } = default!;
    [Inject] HotKeys HotKeys { get; set; } = default!;

    private HotKeysContext? HotKeysContext;
    private string[]? index;
    private Post? post;

    protected override async Task OnInitializedAsync()
    {
        this.HotKeysContext = this.HotKeys.CreateContext()
        .Add(ModCode.None, Code.ArrowLeft, async () => await PreviousButton(), exclude: Exclude.InputNonText)
        .Add(ModCode.None, Code.ArrowRight, async () => await NextButton(), exclude: Exclude.InputNonText);
    }

    private void ToggleRightDrawer()
    {
        Application.IsRightDrawerOpen = !Application.IsRightDrawerOpen;
    }

    private async Task PreviousButton()
    {
        if (post == null)
            return;

        int currentIndex = Application.Posts.IndexOf(post);
        if (currentIndex > 0)
        {
            post = Application.Posts.ElementAt(currentIndex - 1);
            Navigation.NavigateTo(post.Id);
            await JSRuntime.InvokeVoidAsync("scrollToTop");
        }
    }

    private async Task NextButton()
    {
        if (post == null)
            return;

        int currentIndex = Application.Posts.IndexOf(post);
        if (currentIndex < Application.Posts.Count - 1)
        {
            post = Application.Posts.ElementAt(currentIndex + 1);
            Navigation.NavigateTo(post.Id);
            await JSRuntime.InvokeVoidAsync("scrollToTop");
        }
    }

    private void OpenSearchDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                FullWidth = true,
                MaxWidth =
            MaxWidth.Small,
                Position = DialogPosition.Center
            };
        DialogParameters parameters = new();
        parameters.Add("OnChanged", (Action)StateHasChanged);

        DialogService.Show<Re.Blog.Components.SearchDialog>("", parameters, closeOnEscapeKey);
    }

    private void OpenTimelineDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions()
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Large
            };

        DialogService.Show<Re.Blog.Components.TimelineDialog>("", closeOnEscapeKey);
    }

    private async Task LoadPostsFromIndex()
    {
        index = await Http.GetFromJsonAsync<string[]?>("posts/index.json");
        if (index == null)
        {
            Console.Error.WriteLine("Could not fetch index (posts/index.json).");
            return;
        }

        foreach (string path in index)
        {
            Console.WriteLine(path);
            string markdown = await Http.GetStringAsync(new Uri($"posts/{path}", UriKind.Relative));

            Post post = new Post(path, markdown);
            Application.Posts.Add(post);
        }

        if (id != null && Application.Posts.Count > 0)
        {
            post = Application.Posts.Where(p => p.Id == id).Single();
        }

        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("initActiveTableOfContentsLink");

        if (firstRender)
        {
            await LoadPostsFromIndex();
        }
        else if (id == null && Application.Posts.Count > 0)
        {
            post = Application.Posts.Last();
            Navigation.NavigateTo(Application.Posts.Last().Id);

        }
        else if (id != null && Application.Posts.Count > 0)
        {
            post = Application.Posts.Where(p => p.Id == id).Single();
        }
    }

    public void Dispose()
    {
        this.HotKeysContext?.Dispose();
    }
}